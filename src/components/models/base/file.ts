import { PossibleColor } from '../utils/color';
import type { UserIndexed } from './user';
import type { UserAvatar } from './user_avatar';

export const REACTIONS_TYPES = {
  thumbs_up: 'üëç',
  thumbs_down: 'üëé',
  love: 'üß°',
  smile: 'üòÄ',
  surprised: 'üò≤',
  party: 'üéâ'
} as const;

export type ReactionType = keyof typeof REACTIONS_TYPES;

/** URI Information Model */
export type URIInfo = {
  /** */
  uri: string;

  /** */
  scheme: string;

  /** */
  netloc: string;

  /** */
  path?: string;

  /** */
  params?: string;

  /** */
  query?: string;

  /** */
  fragment?: string;

  /** */
  username?: string;

  /** */
  password?: string;

  /** */
  hostname: string;

  /** */
  port?: number;
};

/** File Seen Model */
export type Seen = {
  /** How many times have we seen this file? */
  count: number;

  /** First seen timestamp */
  first: string & Date;

  /** Last seen timestamp */
  last: string & Date;
};

/** Label Categories Model */
export type LabelCategories = {
  /** List of extra informational labels about the file */
  info: string[];

  /** List of labels related to the technique used by the file and the signatures that hits on it. */
  technique: string[];

  /** List of labels related to attribution of this file (implant name, actor, campain...) */
  attribution: string[];
};

/** Reaction Model */
export type Reaction = {
  /** Icon of the user who made the reaction */
  icon: ReactionType;

  /** Username of the user who made the reaction */
  uname: string;
};

/** Author of the Comment Model */
export type Author = Pick<UserIndexed, 'uname' | 'name' | 'email'> & { avatar: UserAvatar };

/** Comment Model */
export type Comment = {
  /** Comment ID */
  cid: string;

  /** Username of the user who made the comment */
  uname: string;

  /** Datetime the comment was made on */
  date: string & Date;

  /** Text of the comment written by the author */
  text: string;

  /** List of reactions made on a comment */
  reactions: Reaction[];
};

/** Model of File */
export type File = {
  /** Archiving timestamp (Deprecated) */
  archive_ts?: string & Date;

  /** Dotted ASCII representation of the first 64 bytes of the file */
  ascii: string;

  /** Classification of the file */
  classification: string;

  /** List of comments made on a file */
  comments: Comment[];

  /** Entropy of the file */
  entropy: number;

  /** Expiry timestamp */
  expiry_ts?: string & Date;

  /** Was loaded from the archive */
  from_archive: boolean;

  /** Hex dump of the first 64 bytes of the file */
  hex: string;

  /** SHA256 hash of the file */
  id: string;

  /** Is this an image from an Image Result Section? */
  is_section_image: boolean;

  /** Is this a file generated by a service? */
  is_supplementary: boolean;

  /** List of labels of the file */
  labels: string[];

  /** Categories of label" */
  label_categories: LabelCategories;

  /** Output from libmagic related to the file */
  magic: string;

  /** MD5 of the file */
  md5: string;

  /** MIME type of the file as identified by libmagic */
  mime?: string;

  /** Details about when the file was seen */
  seen: Seen;

  /** SHA1 hash of the file */
  sha1: string;

  /** SHA256 hash of the file */
  sha256: string;

  /** Size of the file in bytes */
  size: number;

  /** SSDEEP hash of the file */
  ssdeep: string;

  /** TLSH hash of the file */
  tlsh?: string;

  /** Type of file as identified by Assemblyline */
  type: string;

  /** URI structure to speed up specialty file searching */
  uri_info?: URIInfo;
};

export type FileIndexed = Pick<
  File,
  | 'archive_ts'
  | 'classification'
  | 'comments'
  | 'entropy'
  | 'from_archive'
  | 'id'
  | 'is_section_image'
  | 'is_supplementary'
  | 'label_categories'
  | 'labels'
  | 'md5'
  | 'seen'
  | 'sha1'
  | 'sha256'
  | 'size'
  | 'tlsh'
  | 'type'
  | 'uri_info'
>;

export const DEFAULT_COMMENT: Comment = {
  cid: null,
  date: null,
  text: '',
  uname: null,
  reactions: []
};

export const DEFAULT_AUTHOR: Author = {
  uname: null,
  name: null,
  avatar: null,
  email: null
};

export const DEFAULT_LABELS: LabelCategories = {
  attribution: [],
  technique: [],
  info: []
};

export const LABELS_COLOR_MAP: Record<keyof LabelCategories, PossibleColor> = {
  info: 'default',
  technique: 'secondary',
  attribution: 'primary'
};
