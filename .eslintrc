{
  "extends": [
    "airbnb-typescript",
    "prettier",
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:react/recommended",
    "plugin:@tanstack/query/recommended"
  ],
  "root": true,
  "ignorePatterns": ["vite.config.mts"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "import",
    "jsx-a11y",
    "no-relative-import-paths",
    "prettier",
    "react",
    "react-hooks",
    "react-refresh",
    "testing-library",
    "vitest"
  ],
  "env": {
    "browser": true,
    "es6": true,
    "mocha": true,
    "node": true
  },
  "settings": {
    // Needed to help eslint understand absolute imports, at least for intellij.
    "import/resolver": {
      "node": {
        "paths": ["src"]
      }
    },
    "react": {
      "createClass": "createReactClass", // Regex for Component Factory to use,
      // default to "createReactClass"
      "pragma": "React", // Pragma to use, default to "React"
      "fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
      "version": "detect", // React version. "detect" automatically picks the version you have installed.
      // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
      // It will default to "latest" and warn if missing, and to "detect" in the future
      "flowVersion": "0.53" // Flow version
    }
  },
  "rules": {
    "@typescript-eslint/ban-types": "warn",
    "@typescript-eslint/no-base-to-string": "warn",
    "@typescript-eslint/consistent-type-imports": "warn",
    "@typescript-eslint/default-param-last": "off",
    "@typescript-eslint/indent": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      // Allow camelCase variables (23.2), PascalCase variables (23.8), and UPPER_CASE variables (23.10)
      {
        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "selector": "variable"
      },
      // Allow camelCase functions (23.2), and PascalCase functions (23.8)
      {
        "format": ["camelCase", "PascalCase"],
        "leadingUnderscore": "allow",
        "selector": "function"
      },
      // Airbnb recommends PascalCase for classes (23.3), and although Airbnb does not make TypeScript recommendations, we are assuming this rule would similarly apply to anything "type like", including interfaces, type aliases, and enums
      {
        "format": ["PascalCase"],
        "selector": "typeLike"
      }
    ],
    "@typescript-eslint/no-duplicate-type-constituents": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-floating-promises": "warn",
    "@typescript-eslint/no-for-in-array": "warn",
    "@typescript-eslint/no-misused-promises": "off",
    "@typescript-eslint/no-redundant-type-constituents": "warn",
    "@typescript-eslint/no-unnecessary-type-assertion": "warn",
    "@typescript-eslint/no-unnecessary-type-constraint": "warn",
    "@typescript-eslint/no-unsafe-argument": "warn",
    "@typescript-eslint/no-unsafe-assignment": "warn",
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-enum-comparison": "warn",
    "@typescript-eslint/no-unsafe-member-access": "warn",
    "@typescript-eslint/no-unsafe-return": "warn",
    "@typescript-eslint/no-unused-expressions": "off",
    "@typescript-eslint/no-unused-vars": "warn",
    "@typescript-eslint/no-use-before-define": "warn",
    "@typescript-eslint/prefer-as-const": "warn",
    "@typescript-eslint/space-before-function-paren": "off",
    "arrow-parens": ["error", "as-needed"],
    "comma-spacing": "warn",
    "import/imports-first": ["error", "absolute-first"],
    "import/newline-after-import": "error",
    "import/no-cycle": ["warn", { "maxDepth": 1 }],
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true, "packageDir": "./" }],
    "import/no-named-as-default": "off",
    "import/prefer-default-export": "off",
    "jsx-a11y/anchor-is-valid": [
      "error",
      {
        "aspects": ["noHref", "invalidHref", "preferButton"],
        "components": ["Link"],
        "specialLink": ["to", "hrefLeft", "hrefRight"]
      }
    ],
    "jsx-a11y/control-has-associated-label": "off",
    "jsx-a11y/label-has-associated-control": "off",
    "linebreak-style": "off",
    "max-len": [
      "off",
      {
        "code": 120,
        "ignoreComments": true,
        "ignoreRegExpLiterals": true,
        "tabWidth": 2
      }
    ],
    "no-async-promise-executor": "off",
    "no-console": "warn",
    "no-extra-boolean-cast": "off",
    "no-nested-ternary": "off",
    "no-param-reassign": "warn",
    "no-plusplus": "off",
    "no-prototype-builtins": "warn",
    "no-relative-import-paths/no-relative-import-paths": [
      "warn",
      { "allowSameFolder": true, "prefix": "", "rootDir": "src" }
    ],
    "no-underscore-dangle": "off",
    "no-unsafe-optional-chaining": "warn",
    "no-unused-vars": "warn",
    "no-var": "warn",
    "prefer-const": "warn",
    "radix": "off",
    "react-hooks/exhaustive-deps": "warn", // Checks effect dependencies
    "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
    "react-refresh/only-export-components": "off",
    "react/display-name": "off",
    "react/jsx-curly-newline": "off",
    "react/jsx-filename-extension": ["warn", { "extensions": [".js", ".jsx", ".ts", ".tsx"] }],
    "react/jsx-no-literals": [
      "warn",
      {
        "allowedStrings": ["/", ":", "(", ")", ":&nbsp;", "-", "APA2B", "."],
        "ignoreProps": false,
        "noAttributeStrings": false,
        "noStrings": false
      }
    ],
    "react/jsx-one-expression-per-line": ["off", { "allow": "literal" }],
    "react/jsx-props-no-spreading": "off",
    "react/jsx-uses-react": "off",
    "react/jsx-wrap-multilines": "off",
    "react/no-array-index-key": "off",
    "react/no-children-prop": "off",
    "react/prop-types": "off",
    "react/react-in-jsx-scope": "off",
    "semi": "error",
    "vitest/max-nested-describe": ["error", { "max": 3 }]
  },
  "globals": {
    "Blob": true,
    "FileReader": true,
    "FormData": true,
    "Headers": true,
    "Request": true,
    "document": true,
    "fetch": true,
    "localStorage": true,
    "navigator": true,
    "vi": true,
    "window": true
  }
}
